name: Personal Website CI/CD
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

jobs:
  backend_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: cargo check
      #   run: cargo check --all
      #   working-directory: backend

      # - name: cargo fmt check
      #   run: cargo fmt --all --check
      #   working-directory: backend

      # - name: cargo test
      #   run: cargo test --all
      #   working-directory: backend

      # - name: cargo clippy check
      #   run: cargo clippy --all --all-targets --all-features
      #   working-directory: backend

  frontend_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: "latest"
      #     cache: "npm"
      #     cache-dependency-path: frontend/package-lock.json

      # - name: Install dependencies
      #   run: npm ci
      #   working-directory: frontend

      # - name: Type check
      #   run: npm run type-check
      #   working-directory: frontend

      # - name: Lint check
      #   run: npm run lint
      #   working-directory: frontend

      # - name: Format check
      #   run: npx prettier --check .
      #   working-directory: frontend

  auto_deployment:
    runs-on: ubuntu-latest
    needs: [backend_check, frontend_check]
    # if: github.ref == 'refs/heads/main' && needs.backend-check.result == 'success' && needs.frontend-check.result == 'success'
    if: needs.backend_check.result == 'success' && needs.frontend_check.result == 'success'
    steps:
      - uses: actions/checkout@v3
      
      - name: build backend
        run: cargo build --release
        working-directory: backend

      - uses: actions/setup-node@v3
        with:
          node-version: "latest"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: build frontend
        run: |
          npm ci
          npm run build
        working-directory: frontend

      - name: package artifacts
        run: |
          mkdir -p artifacts
          cp backend/target/release/backend artifacts
          cp -r frontend/out artifacts
          tar czvf deployment.tar.gz artifacts

      - uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: deployment.tar.gz

      - name: send secure webhook
        env:
          PRIVATE_KEY: ${{ secrets.WEBHOOK_PRIVATE_KEY }}
          KEY_FINGERPRINT: ${{ secrets.PUBLIC_KEY_FINGERPRINT }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          echo $PRIVATE_KEY
          echo ${#PRIVATE_KEY}
          echo $KEY_FINGERPRINT
          echo ${#KEY_FINGERPRINT}
          echo $WEBHOOK_URL
          echo ${#WEBHOOK_URL}
          # Generate signature data
          TIMESTAMP=$(date +%s)
          ARTIFACT_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts/$ARTIFACT_ID"
          DATA_STRING="timestamp=$TIMESTAMP|artifact_url=$ARTIFACT_URL"

          # Create temp private key
          cat << 'EOF' > private.pem
          $PRIVATE_KEY
          EOF
          chmod 600 private.pem
          
          # Generate PKCS#1 v1.5 signature
          SIGNATURE=$(echo -n "$DATA_STRING" | openssl dgst -sha512 -sign private.pem | base64 -w0)
          
          # Send request
          curl -X POST "$WEBHOOK_URL" \
            -H "X-Public-Key-Fingerprint: $KEY_FINGERPRINT" \
            -H "X-Signature-Timestamp: $TIMESTAMP" \
            -H "X-Signature: $SIGNATURE" \
            -H "Content-Type: application/json" \
            -d "{\"artifact_url\":$ARTIFACT_URL}"
          
          # Clear private key
          shred -u private.pem